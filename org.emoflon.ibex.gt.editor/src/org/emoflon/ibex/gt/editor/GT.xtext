grammar org.emoflon.ibex.gt.editor.GT with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate gT "http://www.emoflon.org/ibex/gt/editor/GT"

GraphTransformationFile:
	(imports+=Import)*
	(rules+=Rule)*;

Import:
	'import' name=STRING;

Rule:
	(abstract?='abstract')? 'rule' name=ID
	('refines' superRules+=[Rule] (',' superRules+=[Rule])*)?
	('('
	(parameters+=Parameter (',' parameters+=Parameter)*)?
	')')?
	('{'
	(nodes+=Node)*
	'}')?
	(nacs+=NAC)*;

Parameter:
	name=ID ':' type=[ecore::EDataType];

	// Nodes
Node:
	ContextNode | OperatorNode;

ContextNode:
	name=ID ':' type=[ecore::EClass]
	('{'
	constraints+=InnerNodeConstraint*
	'}')?;

OperatorNode:
	operator=Operator
	name=ID ':' type=[ecore::EClass]
	('{'
	constraints+=InnerNodeConstraint*
	'}')?;

enum Operator:
	CREATE='++' | DELETE='--';

InnerNodeConstraint:
	AttributeConstraint | Reference;

	// Attribute Assignments and Conditions
AttributeConstraint:
	'.' attribute=[ecore::EAttribute] relation=Relation value=Expression;

enum Relation:
	ASSIGNMENT=':=' |
	GREATER='>' |
	GREATER_OR_EQUAL='>=' |
	EQUAL='==' |
	UNEQUAL='!=' |
	SMALLER_OR_EQUAL='<=' |
	SMALLER='<';

Expression:
	LiteralValue | EnumValue | ParameterValue;

LiteralValue:
	{BooleanConstant} value=('true' | 'false') |
	{NumberConstant} value=NumericExpression |
	{StringConstant} value=STRING;

terminal DECIMAL:
	INT '.' INT;

NumericExpression:
	(('-')? INT | ('-')? DECIMAL);

EnumValue:
	'enum::' literal=[ecore::EEnumLiteral];

ParameterValue:
	'param::' parameter=Parameter;

	// References
Reference:
	ContextReference | OperatorReference;

ContextReference:
	'-' type=[ecore::EReference] '->' target=[Node];

OperatorReference:
	operator=Operator '-' type=[ecore::EReference] '->' target=[Node];

	// Negative Application Conditions
NAC:
	'nac' name=ID '{'
	(nodes+=Node)*
	'}';
